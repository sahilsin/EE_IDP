# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ElCGDhqb6d4M41ErqAFNURXxt2BdRTWb
"""

import numpy as np
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
from sklearn.datasets import make_regression

N = 50
np.random.seed(20)
x = np.sort(np.random.rand(N,1),axis=0)
noise = np.random.normal(0,0.3,size=(N,1))
A = 2
y = A*np.sin(2*np.pi*x) + noise

def vis_input_data(N,wit,hig):
   np.random.seed(20)
   plt.figure(figsize=(wit,hig))
   x = np.sort(np.random.rand(N,1),axis=0)
   noise = np.random.normal(0,0.3,size=(N,1))
   y = A*np.sin(2*np.pi*x) + noise

   plt.scatter(x,y,c='b',marker='o',label='Data with noise')
   plt.plot(np.linspace(0,1,50),np.sin(2*np.linspace(0,1,50)*np.pi),c='g',linewidth=2,label='function generating input data')
   
   plt.title('number of training data N =' + str(N)) 
   plt.xlabel('x');plt.ylabel('t')

sk_poly_deg=3
poly_feature = PolynomialFeatures(degree=sk_poly_deg,include_bias=False)
F = poly_feature.fit_transform(x)

vis_input_data(N,6,5)

plt.legend()
plt.show()

# linear regression for multioutput regression
from sklearn.datasets import make_regression
from sklearn.linear_model import LinearRegression
# create datasets of sinosuidal form considering target variables
X, y = make_regression(n_samples=50, n_features=10, n_informative=5, n_targets=2, random_state=1, noise=0.3)
# define model
model = LinearRegression()
# fit model
model.fit(X, y)
plt.plot(x,model.predict(X),'r',label='Plot after LinearRegression for two targets that is Multioutput ')
plt.legend()
plt.show()

